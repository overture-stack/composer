services:
  # ======================================
  # Conductor 
  # --------------------------------------
  # Orchestrates setup with health checks, data population and logging
  # --------------------------------------
  conductor:
    image: alpine/curl:8.8.0
    container_name: conductor
    ports:
      - "9204:9204" 
    volumes:
      - ./configurationFiles/elasticsearchConfigs/es-docs.json:/es-docs.json
      - ./configurationFiles/elasticsearchConfigs/quickstart_index_template.json:/usr/share/elasticsearch/config/quickstart_index_template.json
      - ./health:/health
    command: >
      sh -c '
        set -e
        apk add --no-cache jq curl > /dev/null 2>&1
        echo -e "\033[1;36m╔═════════════════════════════════════════════════╗\033[0m"
        echo -e "\033[1;36m║ Welcome to the Stage Dev Environment QuickStart ║\033[0m"
        echo -e "\033[1;36m╚═════════════════════════════════════════════════╝\033[0m"

        # Wait for Elasticsearch
        echo -e "\033[1;35m[1/5]\033[0m Starting up Elasticsearch (this may take a few minutes)"
        sleep 20
        until curl -s -u elastic:myelasticpassword -X GET "http://elasticsearch:9200/_cluster/health" > /dev/null; do
          echo -e "\033[1;36mElasticsearch:\033[0m Not yet reachable, checking again in 30 seconds"
          sleep 30
        done
        echo -e "\033[1;32mSuccess:\033[0m Elasticsearch is reachable"

        # Set up Elasticsearch index template
        echo -e "\033[1;35m[2/5]\033[0m Setting up Elasticsearch index template"
        if ! curl -s -u elastic:myelasticpassword "http://elasticsearch:9200/_template/index_template" | grep -q "\"index_patterns\"" > /dev/null; then 
          curl -s -u elastic:myelasticpassword -X PUT "http://elasticsearch:9200/_template/index_template" -H "Content-Type: application/json" -d @/usr/share/elasticsearch/config/quickstart_index_template.json > /dev/null &&
          echo -e "\033[1;32mSuccess:\033[0m Elasticsearch index template created successfully"
        else
          echo -e "\033[1;36mElasticsearch:\033[0m Index template already exists, skipping creation"
        fi

        # Set up Elasticsearch index and alias (needs failure check)
        echo -e "\033[1;35m[3/5]\033[0m Setting up Elasticsearch index and alias"
        echo -e "\033[1;36mElasticsearch:\033[0m Checking if Elasticsearch index exists"
        if ! curl -s -f -u elastic:myelasticpassword -X GET "http://elasticsearch:9200/overture-quickstart-index" > /dev/null 2>&1; then
          echo -e "\033[1;32mElasticsearch:\033[0m Index and alias does not yet exist, creating Elasticsearch index and alias"
          response=$$(curl -s -w "\n%{http_code}" -u elastic:myelasticpassword -X PUT "http://elasticsearch:9200/overture-quickstart-index" -H "Content-Type: application/json" -d "{\"aliases\": {\"file_centric\": {\"is_write_index\": true}}}")
          http_code=$$(echo "$$response" | tail -n1)
          body=$$(echo "$$response" | sed "$$d")
          echo -e "\033[1;32mSuccess:\033[0m Index and alias created successfully, Elasticsearch setup complete"
        else
          echo -e "\033[1;36mElasticsearch:\033[0m Index already exists, skipping creation"
        fi

        echo -e "\033[1;35m[4/5]\033[0m Importing Elasticsearch documents"
        jq -c ".hits.hits[]._source" /es-docs.json | while IFS= read -r document; do
          curl s -f -u elastic:myelasticpassword -X POST "http://elasticsearch:9200/overture-quickstart-index/_doc" -H "Content-Type: application/json" -d "$$document" >/dev/null 2>&1
        done
        echo -e "\033[1;32mSuccess:\033[0m Document import complete"

        # Updating health status of the conductor image
        # This health file signals container readiness for Arranger startup
        echo "healthy" > /health/conductor_health
        echo -e  "\033[1;36mConductor:\033[0m Updating Container Status. Health check file created"

        # Check Arranger
        echo -e "\033[1;35m[5/5]\033[0m Checking if Arranger is reachable"
        until curl -s -o /dev/null -w "%{http_code}" "http://arranger-server:5050/graphql" | grep -q "200"; do
          echo -e "\033[1;36mArranger:\033[0m Not yet reachable, checking again in 20 seconds"
          sleep 20
        done
        echo -e "\033[1;32mSuccess:\033[0m Arranger is now reachable"
        echo -e "\033[1;36m╔════════════════════════════════════════╗\033[0m"
        echo -e "\033[1;36m║  Stage Dev Dependency Setup Complete   ║\033[0m"
        echo -e "\033[1;36m╚════════════════════════════════════════╝\033[0m"
        echo -e "\033[1m1️⃣  To run stage locally, start by cloning the repo:\033[0m\n"
        echo -e "   \033[1;32mgit clone https://github.com/overture-stack/stage.git\033[0m\n"
        echo -e "\033[1m2️⃣  Then install the dependencies by running:\033[0m\n"
        echo -e "   \033[1;32mnpm ci\033[0m\n"
        echo -e "\033[1m3️⃣  Rename \033[1;32m.env.stageDev\033[0m to \033[1;32m.env:\033[0m\n"
        echo -e "\033[1m4️⃣  Run the development server:\033[0m\n"
        echo -e "   \033[1;32mnpm run dev\033[0m\n"
        rm /health/conductor_health
        exit 0
      '
    healthcheck:
      test: ["CMD", "test", "-f", "/health/conductor_health"]
      interval: 30s
      timeout: 10s
      retries: 100
      start_period: 45s
 
  # ==================================================================================
  #  Stage Dependent Services (Elasticsearch, Arranger)
  # ==================================================================================
  
  # ======================================
  # Elasticsearch
  # ======================================
  # Search and analytics engine used to help query massive datasets flexibly and efficiently.
  # Documentation Link: https://www.overture.bio/documentation/guides/deployment/dataportal/#setting-up-elasticsearch
  # --------------------------------------
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.1
    container_name: elasticsearch
    platform: linux/amd64
    ports:
      - "9200:9200"
    environment:
      discovery.type: single-node
      cluster.name: workflow.elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx2048m
      ELASTIC_PASSWORD: myelasticpassword
      xpack.security.enabled: "true"
      MANAGE_INDEX_TEMPLATES: "true"
      NETWORK_HOST: http://localhost:9200
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
    healthcheck:
      test: "curl --silent --fail localhost:9200/_cluster/health?wait_for_status=yellow&timeout=50s || exit 1"
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 25s

  # ======================================
  # Arranger-Server
  # ======================================
  # Search API generation with compatible search UI components
  # Documentation Link: https://www.overture.bio/documentation/guides/deployment/dataportal/#running-arranger
  # --------------------------------------
  arranger-server:
    image: ghcr.io/overture-stack/arranger-server:3.0.0-beta.33
    container_name: arranger-server
    platform: linux/amd64
    depends_on:
      conductor:
        condition: service_healthy
    ports:
      - "5050:5050"
    volumes:
     - ./configurationFiles/arrangerConfigs/base.json:/app/modules/server/configs/base.json
     - ./configurationFiles/arrangerConfigs/extended.json:/app/modules/server/configs/extended.json
     - ./configurationFiles/arrangerConfigs/facets.json:/app/modules/server/configs/facets.json
     - ./configurationFiles/arrangerConfigs/matchbox.json:/app/modules/server/configs/matchbox.json
     - ./configurationFiles/arrangerConfigs/table.json:/app/modules/server/configs/table.json
    environment:
      # Arranger Variables
      ENABLE_LOGS: false
      # Elasticsearch Variables
      ES_HOST: http://elasticsearch:9200
      ES_USER: elastic
      ES_PASS: myelasticpassword
      # Stage Variables
      REACT_APP_BASE_URL: http://localhost:3000
      REACT_APP_ARRANGER_ADMIN_ROOT: http://localhost:5050/graphql