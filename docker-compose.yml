version: "3"
services:
  # ==================================================================================
  # OAuth (KeyCloak)
  # ==================================================================================
  
  # ==========================
  # Keycloak Database
  # ==========================
  keycloak-db:
    image: postgres:14
    container_name: keycloak-db
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: keycloakDb
    volumes:
      - ./persistentStorage/data-keycloak-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d keycloakDb"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  # ==========================
  # Keycloak 
  # ==========================
  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    container_name: keycloak
    depends_on:
      keycloak-db:
        condition: service_healthy
    ports:
      - "8180:8080"
    environment:
      # Postgres Variables
      KC_DB: postgres
      KC_DB_USERNAME: admin
      KC_DB_PASSWORD: admin123
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloakDb
      # Keycloak Variables
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin123
      KC_HOSTNAME: localhost
      KC_HEALTH_ENABLED: true 
    volumes:
      - ./configurationFiles/keycloakConfigs/keycloak-apikeys-1.0.1.jar:/opt/keycloak/providers/keycloak-apikeys.jar
      - ./configurationFiles/keycloakConfigs/myrealm-realm.json:/opt/keycloak/data/import/myrealm-realm.json
      - ./configurationFiles/keycloakConfigs/myrealm-users-0.json:/opt/keycloak/data/import/myrealm-users-0.json
    command: >
      start-dev
      --import-realm
      --hostname-port=8180

  # ==================================================================================
  # File Management (Song, Score, Kafka, Zookeeper, Minio)
  # ==================================================================================
  
  # ==========================
  # Zookeeper
  # ==========================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo srvr | nc 127.0.0.1 2181 | grep Mode"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 20s

  # ==========================
  # Kafka
  # ==========================
  kafka:
    image: confluentinc/cp-kafka:5.4.0
    container_name: kafka
    platform: linux/amd64
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:9092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s

  # ==========================
  # Song Database
  # ==========================
  song-db:
    image: postgres:11.1
    container_name: song-db
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: songDb
    volumes:
      - ./persistentStorage/data-song-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d songDb"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  # ==========================
  # Song
  # ==========================
  song:
    image: ghcr.io/overture-stack/song-server:438c2c42
    container_name: song
    platform: linux/amd64
    depends_on:
      keycloak:
        condition: service_started
      song-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      # Spring Variables
      SPRING_PROFILES_ACTIVE: prod,secure,kafka
      # Flyway variables
      SPRING_FLYWAY_ENABLED: true
      # Song Variables
      ID_USELOCAL: true
      SCHEMAS_ENFORCELATEST: true
      # Score Variables
      SCORE_URL: http://score:8087
      SCORE_ACCESSTOKEN: 68fb42b4-f1ed-4e8c-beab-3724b99fe528
      # Keycloak Variables
      AUTH_SERVER_PROVIDER: keycloak
      AUTH_SERVER_CLIENTID: dms
      AUTH_SERVER_CLIENTSECRET: t016kqXfI648ORoIP5gepqCzqtsRjlcc
      AUTH_SERVER_TOKENNAME: apiKey
      AUTH_SERVER_KEYCLOAK_HOST: http://keycloak:8080
      AUTH_SERVER_KEYCLOAK_REALM: myrealm
      AUTH_SERVER_SCOPE_STUDY_PREFIX: STUDY.
      AUTH_SERVER_SCOPE_STUDY_SUFFIX: .WRITE
      AUTH_SERVER_SCOPE_SYSTEM: song.WRITE
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://keycloak:8080/realms/myrealm/protocol/openid-connect/certs
      AUTH_SERVER_INTROSPECTIONURI: http://keycloak:8080/realms/myrealm/apikey/check_api_key/
      # Postgres Variables
      SPRING_DATASOURCE_URL: jdbc:postgresql://song-db:5432/songDb?stringtype=unspecified
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin123
      # Kafka Variables
      SPRING_KAFKA_BOOTSTRAPSERVERS: http://kafka:9092
      SPRING_KAFKA_TEMPLATE_DEFAULTTOPIC: song-analysis
      # Swagger Variable
      SWAGGER_ALTERNATEURL: /swagger-api

  # ==========================
  # Minio
  # ==========================
  minio:
    image: minio/minio:RELEASE.2018-05-11T00-29-24Z
    container_name: minio
    platform: linux/amd64
    ports:
      - 9000:9000
    environment:
      MINIO_ACCESS_KEY: admin
      MINIO_SECRET_KEY: admin123
    command: server /data
    volumes:
      - ./persistentStorage/data-minio:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
  
  # ==========================
  # Minio Client (Required for starting up without a pre-existing minio folder)
  # ==========================
  minio-client:
    image: minio/mc
    container_name: minio-client
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c '
      /usr/bin/mc alias set myminio http://host.docker.internal:9000 admin admin123 &&
      /usr/bin/mc mb myminio/state &&
      /usr/bin/mc mb myminio/object &&
      /usr/bin/mc mb myminio/object/data &&
      echo "" > /tmp/heliograph && 
      /usr/bin/mc put /tmp/heliograph myminio/object/data/heliograph; 
      rm /tmp/heliograph; 
      exit 0;
      '
    
  # ==========================
  # Score
  # ==========================
  score:
    image: ghcr.io/overture-stack/score-server:47f006ce
    container_name: score
    platform: linux/amd64
    depends_on:
      keycloak:
        condition: service_started
      song:
        condition: service_started
    ports:
      - "8087:8087"
    environment:
      # Spring Variables
      SPRING_PROFILES_ACTIVE: default,collaboratory,prod,secure,jwt
      SERVER_PORT: 8087
      # Song Variable
      METADATA_URL: http://song:8080
      # Score Variables
      SERVER_SSL_ENABLED: "false"
      # Object Storage Variables
      S3_ENDPOINT: http://host.docker.internal:9000
      S3_ACCESSKEY: admin
      S3_SECRETKEY: admin123
      S3_SIGV4ENABLED: true
      S3_SECURED: false
      OBJECT_SENTINEL: heliograph
      BUCKET_NAME_OBJECT: object
      BUCKET_NAME_STATE: state
      UPLOAD_PARTSIZE: 1073741824
      UPLOAD_CONNECTION_TIMEOUT: 1200000
      # Keycloak Variables
      AUTH_SERVER_PROVIDER: keycloak
      AUTH_SERVER_CLIENTID: dms
      AUTH_SERVER_CLIENTSECRET: t016kqXfI648ORoIP5gepqCzqtsRjlcc
      AUTH_SERVER_TOKENNAME: apiKey
      AUTH_SERVER_KEYCLOAK_HOST: http://keycloak:8080
      AUTH_SERVER_KEYCLOAK_REALM: myrealm
      AUTH_SERVER_SCOPE_STUDY_PREFIX: STUDY.            
      AUTH_SERVER_SCOPE_DOWNLOAD_SUFFIX: .READ
      AUTH_SERVER_SCOPE_DOWNLOAD_SYSTEM: score.READ
      AUTH_SERVER_SCOPE_UPLOAD_SYSTEM: score.WRITE
      AUTH_SERVER_SCOPE_UPLOAD_SUFFIX: .WRITE
      AUTH_SERVER_URL: http://keycloak:8080/realms/myrealm/apikey/check_api_key/      
      AUTH_JWT_PUBLICKEYURL: http://keycloak:8080/oauth/token/public_key
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: http://keycloak:8080/realms/myrealm/protocol/openid-connect/certs
 
  # ==================================================================================
  #  E. Search (Maestro, Elasticsearch, Arranger)
  # ==================================================================================
  
  # ==========================
  # Maestro
  # ==========================
  maestro:
    image: ghcr.io/overture-stack/maestro:4.3.0
    container_name: maestro
    platform: linux/amd64
    depends_on:
      song:
        condition: service_started
      index-setup:
        condition: service_completed_successfully
    ports:
      - "11235:11235"
    environment:
      # Maestro Variables
      MAESTRO_FAILURELOG_ENABLED: true
      MAESTRO_FAILURELOG_DIR: app/logs/maestro
      MAESTRO_LOGGING_LEVEL_ROOT: INFO
      MAESTRO_NOTIFICATIONS_SLACK_ENABLED: false
      # Song Variables
      MAESTRO_REPOSITORIES_0_CODE: song.overture
      MAESTRO_REPOSITORIES_0_URL: http://song:8080
      MAESTRO_REPOSITORIES_0_NAME: Overture
      MAESTRO_REPOSITORIES_0_ORGANIZATION: Overture
      MAESTRO_REPOSITORIES_0_COUNTRY: CA
      # Elasticsearch Variables
      MAESTRO_ELASTICSEARCH_CLUSTER_NODES: http://elasticsearch:9200
      MAESTRO_ELASTICSEARCH_CLIENT_BASICAUTH_USER: elastic
      MAESTRO_ELASTICSEARCH_CLIENT_BASICAUTH_PASSWORD: myelasticpassword
      MAESTRO_ELASTICSEARCH_CLIENT_TRUSTSELFSIGNCERT: true
      MAESTRO_ELASTICSEARCH_INDEXES_ANALYSISCENTRIC_ENABLED: false
      MAESTRO_ELASTICSEARCH_INDEXES_FILECENTRIC_ENABLED: true
      MAESTRO_ELASTICSEARCH_INDEXES_FILECENTRIC_NAME: overture-quickstart-index
      MAESTRO_ELASTICSEARCH_INDEXES_FILECENTRIC_ALIAS: file_centric
      MAESTRO_ELASTICSEARCH_CLIENT_BASICAUTH_ENABLED: true
      MANAGEMENT_HEALTH_ELASTICSEARCH_ENABLED: "false"
      # Spring Variables
      SPRING_MVC_ASYNC_REQUESTTIMEOUT: -1
      SPRINGDOC_SWAGGERUI_PATH: /swagger-api
      # Kafka Variables
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:9092
      SPRING_CLOUD_STREAM_BINDINGS_SONGINPUT_DESTINATION: song-analysis
  
  # ==========================
  # Elasticsearch
  # ==========================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.1
    container_name: elasticsearch
    ports:
      - "9200:9200"
    environment:
      discovery.type: single-node
      cluster.name: workflow.elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx2048m
      ELASTIC_PASSWORD: myelasticpassword
      xpack.security.enabled: "true"
      MANAGE_INDEX_TEMPLATES: "true"
      NETWORK_HOST: http://localhost:9200
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
    healthcheck:
      test: "curl --silent --fail localhost:9200/_cluster/health?wait_for_status=yellow&timeout=50s || exit 1"
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 20s

  # ==========================
  # Index Setup
  # ==========================
  index-setup:
    image: alpine:latest
    container_name: index-setup
    depends_on:
      elasticsearch:
        condition: service_healthy
    ports:
      - "9201:9201"
    volumes:
      - ./configurationFiles/elasticsearchConfigs/quickstart_index_template.json:/usr/share/elasticsearch/config/quickstart_index_template.json
    command: >
      sh -c "
      apk --no-cache add curl && 
      sleep 60 && 
      if ! curl -s -u elastic:myelasticpassword 'http://elasticsearch:9200/_template/index_template' | grep -q '\"index_patterns\"'; then 
        curl -u elastic:myelasticpassword -X PUT 'http://elasticsearch:9200/_template/index_template' -H 'Content-Type: application/json' -d @/usr/share/elasticsearch/config/quickstart_index_template.json &&
        echo 'Template created successfully.'; 
      else 
        echo 'Template already exists, skipping creation.'; 
      fi &&
      if curl -s -o /dev/null -w '%{http_code}' -u elastic:myelasticpassword -X PUT 'http://elasticsearch:9200/overture-quickstart-index' -H 'Content-Type: application/json' -d '{\"aliases\": {\"file_centric\": {\"is_write_index\": true}}}' | grep -q '200'; then 
        echo 'Alias created successfully.'; 
        exit 0
      else 
        if curl -s -o /dev/null -w '%{http_code}' -u elastic:myelasticpassword -X GET 'http://elasticsearch:9200/overture-quickstart-index' | grep -q '200'; then
          echo 'Alias already exists, skipping creation.';
          exit 0
        else
          echo 'Failed to create alias.'; 
          exit 1; 
        fi
      fi
      " 
      
  # ==========================
  # Arranger-Server
  # ==========================
  arranger-server:
    image: ghcr.io/overture-stack/arranger-server:3.0.0-beta.33
    container_name: arranger-server
    platform: linux/amd64
    depends_on:
      index-setup:
        condition: service_completed_successfully
    ports:
      - "5050:5050"
    volumes:
     - ./configurationFiles/arrangerConfigs/base.json:/app/modules/server/configs/base.json
     - ./configurationFiles/arrangerConfigs/extended.json:/app/modules/server/configs/extended.json
     - ./configurationFiles/arrangerConfigs/facets.json:/app/modules/server/configs/facets.json
     - ./configurationFiles/arrangerConfigs/matchbox.json:/app/modules/server/configs/matchbox.json
     - ./configurationFiles/arrangerConfigs/table.json:/app/modules/server/configs/table.json
    environment:
      # Arranger Variables
      ENABLE_LOGS: false
      # Elasticsearch Variables
      ES_HOST: http://elasticsearch:9200
      ES_USER: elastic
      ES_PASS: myelasticpassword
      # Stage Variables
      REACT_APP_BASE_URL: http://stage:3000
      REACT_APP_ARRANGER_ADMIN_ROOT: http://arranger-server:5050/graphql

  # ==================================================================================
  #  F. Discovery (Stage)
  # ==================================================================================

  # ==========================
  # Stage
  # ==========================
  stage:
    image: ghcr.io/overture-stack/stage:3ede4e2
    container_name: stage
    platform: linux/amd64
    depends_on:
      arranger-server:
        condition: service_started
      keycloak:
        condition: service_started
    ports:
      - "3000:3000"
    environment:
      # Stage Variables
      NEXTAUTH_URL: http://localhost:3000/api/auth
      NEXT_PUBLIC_LAB_NAME: Overture QuickStart Portal
      NEXT_PUBLIC_ADMIN_EMAIL: contact@overture.bio
      NEXT_PUBLIC_DEBUG: true
      NEXT_PUBLIC_SHOW_MOBILE_WARNING: true
      # Keycloak Variables
      NEXT_PUBLIC_AUTH_PROVIDER: keycloak
      ACCESSTOKEN_ENCRYPTION_SECRET: super_secret
      SESSION_ENCRYPTION_SECRET: this_is_a_super_secret_secret
      NEXT_PUBLIC_KEYCLOAK_HOST: http://keycloak:8080
      NEXT_PUBLIC_KEYCLOAK_REALM: myrealm
      NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: webclient
      KEYCLOAK_CLIENT_SECRET: ikksyrYaKX07acf4hpGrpKWcUGaFkEdM
      NEXT_PUBLIC_KEYCLOAK_PERMISSION_AUDIENCE: dms
      # Score Variables
      NEXT_PUBLIC_SCORE_API_URL: http://score:8087
      # Arranger Variables
      NEXT_PUBLIC_ARRANGER_DOCUMENT_TYPE: file
      NEXT_PUBLIC_ARRANGER_INDEX: file_centric
      NEXT_PUBLIC_ARRANGER_API_URL: http://arranger-server:5050
      NEXT_PUBLIC_ARRANGER_MANIFEST_COLUMNS: repository.code, analysis.analysis_id, object_id, file_type, file.name, file.size, file.md5sum, file.index_file.object_id, file.index_file.file_type, file.index_file.name, file.index_file.size, file.index_file.md5sum, donors.donor_id, donors.specimens.samples.sample_id

# ==========================
# Song Client (Data Population)
# ==========================
  song-client:
    image: ghcr.io/overture-stack/song-client:5.1.1
    container_name: song-client
    platform: linux/amd64
    depends_on:
      index-setup:
        condition: service_completed_successfully
    environment:
      CLIENT_ACCESS_TOKEN: 68fb42b4-f1ed-4e8c-beab-3724b99fe528
      CLIENT_STUDY_ID: demo
      CLIENT_SERVER_URL: http://song:8080
    command: >
      bash -c '
        while true; do
            if sing ping | grep -q "true"; then
                echo "Network is reachable. Proceeding with publish."
                sing publish -a 50b7baf0-b21b-4a41-b7ba-f0b21bba41df
                sing publish -a 7fc07277-c051-449b-8072-77c051249b6b
                sing publish -a 61a236ad-a48e-49db-a236-ada48e69dbea
                sing publish -a 9a7e963a-3a67-4cd5-be96-3a3a675cd553
                sing publish -a f7ed8371-52fd-4962-ad83-7152fd89625f
                sing publish -a 94b74841-7380-401c-b748-417380e01c54
                sing publish -a d95b5238-1464-4132-9b52-381464a1325a
                sing publish -a 8b7ee0f8-2145-4571-bee0-f82145557148
                sing publish -a 2d3c77e4-c328-41ad-bc77-e4c32841ad96
                sing publish -a 9867510e-c0dd-4250-a751-0ec0dd125047
                sing publish -a 7f70be40-a3e9-4e7c-b0be-40a3e9fe7c91
                sing publish -a b280e5c2-9b26-4466-80e5-c29b26c466dd
                sing publish -a 0c294aaa-e495-4acf-a94a-aae4954acf5f
                sing publish -a cb9b4770-524f-4ffd-9b47-70524feffd12
                sing publish -a 47421f8c-9c33-4eb2-821f-8c9c335eb2c6
                sing publish -a 539734f8-003e-45e2-9734-f8003ef5e270
                sing publish -a b122591a-b06e-4b70-a259-1ab06edb7076
                sing publish -a f0286f2e-bc2b-43d4-a86f-2ebc2bf3d4dd
                sing publish -a 1458d0a5-cbb1-4628-98d0-a5cbb146282a
                sing publish -a 7c1db3a8-ab25-478d-9db3-a8ab25178d7f
                sing publish -a 8625ffea-a4a0-41f4-a5ff-eaa4a051f4f5
                sing publish -a 6b920d1e-72a0-4480-920d-1e72a0748098
                sing publish -a 0f9462dd-a1f5-4748-9462-dda1f577488f
                sing publish -a 3748f456-d125-4eba-88f4-56d125beba08
                sing publish -a d3df2da6-c8f5-4737-9f2d-a6c8f53737aa
                sing publish -a 34e51227-f5b7-4595-a512-27f5b7b5952f
                sing publish -a 5e941dcc-3b92-46f1-941d-cc3b9206f19b
                sing publish -a 605a1d28-6ea4-4f66-9a1d-286ea44f6607
                sing publish -a 2c013cf7-76bf-4e72-813c-f776bfbe72ea
                sing publish -a fbe65ccd-f0ae-4fe3-a65c-cdf0aeafe300
                echo "Data published successfully. Exiting."
                break
            else
                echo "Network is not yet reachable. Waiting for 10 seconds before retrying..." &&
                sleep 10
            fi
        done
      '
