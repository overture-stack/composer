version: "3"
services:
  # ==================================================================================
  # A. Database Setup (Postgres + PgAdmin4)
  # ==================================================================================

  # ==========================
  # Keycloak Database
  # ==========================
  keycloak-db:
    image: postgres:latest
    container_name: keycloak-db
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: keycloakDb
    volumes:
      - ./persistentStorage/data-keycloak-db:/var/lib/postgresql/data
    networks:
      - db-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d keycloakDb"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  # ==========================
  # Song Database
  # ==========================
  song-db:
    image: postgres:latest
    container_name: song-db
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: songDb
    volumes:
      - ./persistentStorage/data-song-db:/var/lib/postgresql/data
    networks:
      - db-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d songDb"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  # ==========================
  # pgAdmin4
  # ==========================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5051:80"
    networks:
      - db-network

  # ==================================================================================
  # B. Object Storage (Minio, Minio Client)
  # ==================================================================================
  
  # ==========================
  # Minio
  # ==========================
  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: admin123
    command: server --console-address ":9001" /data
    volumes:
      - ./persistentStorage/data-minio:/data

  # ==========================
  # Minio Client
  # ==========================
  minio-client:
    image: minio/mc
    container_name: minio-client
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://host.docker.internal:9000 admin admin123 &&
      /usr/bin/mc mb myminio/state &&
      /usr/bin/mc mb myminio/object;
      exit 0;
      "

  # ==================================================================================
  # C. OAuth (KeyCloak)
  # ==================================================================================
  
  # ==========================
  # Keycloak 
  # ==========================
  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    container_name: keycloak
    depends_on:
      keycloak-db:
        condition: service_healthy
    ports:
      - "8443:8443"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin123
      KC_HOSTNAME: localhost
      KC_HEALTH_ENABLED: true 
    volumes:
      - ./configurationFiles/keycloakConfigs/server.keystore:/opt/keycloak/conf/server.keystore
      - ./configurationFiles/keycloakConfigs/keycloak-apikeys-1.0.1.jar:/opt/keycloak/providers/keycloak-apikeys.jar
      - ./configurationFiles/keycloakConfigs/myrealm-realm.json:/opt/keycloak/data/import/myrealm-realm.json
      - ./configurationFiles/keycloakConfigs/myrealm-users-0.json:/opt/keycloak/data/import/myrealm-users-0.json
    networks:
      - db-network
      - index-network
    command: >
      start
      --import-realm
      --db=postgres
      --db-url=jdbc:postgresql://keycloak-db:5432/keycloakDb
      --db-username=admin
      --db-password=admin123
      --https-key-store-file=/opt/keycloak/conf/server.keystore
      --https-key-store-password=password

  # ==================================================================================
  # C. File Management (Song, Score, Kafka, Zookeeper)
  # ==================================================================================
  
  # ==========================
  # Zookeeper
  # ==========================
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo srvr | nc 127.0.0.1 2181 | grep Mode"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - db-network
    networks:
      - db-network

  # ==========================
  # Kafka
  # ==========================
  kafka:
    image: confluentinc/cp-kafka:5.4.0
    container_name: kafka
    platform: linux/amd64
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:9092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --list --bootstrap-server localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - db-network

  # ==========================
  # Song
  # ==========================
  song:
    image: ghcr.io/overture-stack/song-server:438c2c42
    container_name: song
    platform: linux/amd64
    depends_on:
      keycloak:
        condition: service_started
      song-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      # Swagger URL
      SWAGGER_ALTERNATEURL: /api
      # PostgreSQL connection details
      SPRING_DATASOURCE_URL: jdbc:postgresql://song-db:5432/songDb
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin123
      # Flyway migration settings
      SPRING_FLYWAY_ENABLED: false
      # SPRING_FLYWAY_LOCATIONS: classpath:flyway/sql,classpath:db/migration
      # Spring Run Profiles
      SPRING_PROFILES_ACTIVE: prod,secure,score-client-cred,kafka
      # Keycloak Integration
      AUTH_SERVER_INTROSPECTIONURI: https://localhost:8443/realms/myrealm/apikey/check_api_key/
      AUTH_SERVER_CLIENTID: song
      AUTH_SERVER_CLIENTSECRET: songsecret
      AUTH_SERVER_TOKENNAME: apikey
      AUTH_SERVER_PROVIDER: keycloak
      AUTH_SERVER_KEYCLOAK_HOST: https://localhost
      AUTH_SERVER_KEYCLOAK_REALM: myrealm
      AUTH_SERVER_SCOPE_STUDY_PREFIX: ABC123.
      AUTH_SERVER_SCOPE_STUDY_SUFFIX: .WRITE
      AUTH_SERVER_SCOPE_SYSTEM: song.WRITE
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: https://localhost:8443/realms/myrealm/protocol/openid-connect/certs
      # Score Integration (Required)
      SCORE_URL: http://host.docker.internal:8087
      SCORE_CLIENTCREDENTIALS_ID: score
      SCORE_CLIENTCREDENTIALS_SECRET: scoresecret
      SCORE_CLIENTCREDENTIALS_TOKENURL: http://host.docker.internal:8087/oauth/token
      SCORE_CLIENTCREDENTIALS_SYSTEMSCOPE: score.WRITE
      # ID Management configuration
      ID_USELOCAL: true
      # Schema Strictness Configuration
      SCHEMAS_ENFORCELATEST: true
      # Kafka Event Management Configuration
      SPRING_KAFKA_BOOTSTRAP-SERVERS: kafka:9092
      SPRING_KAFKA_TEMPLATE_DEFAULT-TOPIC: song-analysis
    networks:
      - db-network

  # ==========================
  # Score
  # ==========================
  score:
    image: ghcr.io/overture-stack/score-server:47f006ce
    container_name: score
    platform: linux/amd64
    depends_on:
      minio-client:
        condition: service_completed_successfully
      keycloak:
        condition: service_started
      song:
        condition: service_started
    ports:
      - "8087:8087"
    environment:
      # Spring Run Profiles and server configurations
      SPRING_PROFILES_ACTIVE: collaboratory,prod,secure
      SERVER_PORT: 8087
      SERVER_SSL_ENABLED: false
      # Logging Configuration
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB: INFO
      LOGGING_LEVEL_BIO_OVERTURE_SCORE_SERVER: INFO
      LOGGING_LEVEL_ROOT: INFO
      # Authentication Server
      AUTH_SERVER_PROVIDER: keycloak
      AUTH_SERVER_KEYCLOAK_HOST: http://host.docker.internal:8443
      AUTH_SERVER_KEYCLOAK_REALM: myrealm
      AUTH_SERVER_URL: http://host.docker.internal:8443/realms/myrealm/apikey/check_api_key/
      AUTH_SERVER_TOKENNAME: apiKey
      AUTH_SERVER_CLIENTID: score
      AUTH_SERVER_CLIENTSECRET: scoresecret
      AUTH_SERVER_SCOPE_STUDY_PREFIX: ABC123.
      AUTH_SERVER_SCOPE_DOWNLOAD_SUFFIX: .READ
      AUTH_SERVER_SCOPE_DOWNLOAD_SYSTEM: score.WRITE
      AUTH_SERVER_SCOPE_UPLOAD_SYSTEM: score.READ
      AUTH_SERVER_SCOPE_UPLOAD_SUFFIX: .WRITE
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI: https://localhost:8443/realms/myrealm/protocol/openid-connect/certs
      # Metadata Manager (Song)
      METADATA_URL: song:8080
      # Object Storage (Minio)
      S3_ENDPOINT: minio:9001
      S3_ACCESSKEY: admin
      S3_SECRETKEY: admin123
      BUCKET_NAME_OBJECT: object
      BUCKET_NAME_STATE: state
      UPLOAD_PARTSIZE: 1073741824
      UPLOAD_CONNECTION_TIMEOUT: 1200000

  # ==================================================================================
  #  E. Search (Maestro, Elasticsearch, Arranger)
  # ==================================================================================
  
  # ==========================
  # Maestro
  # ==========================
  maestro:
    image: ghcr.io/overture-stack/maestro:4.3.0
    container_name: maestro
    platform: linux/amd64
    depends_on:
      song:
        condition: service_started
      index-setup:
        condition: service_completed_successfully
    ports:
      - "11235:11235"
    environment:
      # Elasticsearch Integration
      MAESTRO_ELASTICSEARCH_CLUSTER_NODES: elasticsearch:9200
      MAESTRO_ELASTICSEARCH_CLIENT_BASICAUTH_USER: elastic
      MAESTRO_ELASTICSEARCH_CLIENT_BASICAUTH_PASSWORD: myelasticpassword
      MAESTRO_ELASTICSEARCH_CLIENT_TRUSTSELFSIGNCERT: true
      MAESTRO_ELASTICSEARCH_INDEXES_ANALYSISCENTRIC_NAME: analysis-composer-index
      MAESTRO_ELASTICSEARCH_INDEXES_ANALYSISCENTRIC_ALIAS: analysis_centric
      MAESTRO_ELASTICSEARCH_INDEXES_ANALYSISCENTRIC_ENABLED: true
      MAESTRO_ELASTICSEARCH_CLIENT_BASICAUTH_ENABLED: true
      MAESTRO_ELASTICSEARCH_INDEXES_FILECENTRIC_ENABLED: false
      MANAGEMENT_HEALTH_ELASTICSEARCH_ENABLED: false
      MANAGEMENT.SECURITY_ENABLED: false
      # Song Integration
      MAESTRO_REPOSITORIES_0_CODE: song.overture
      MAESTRO_REPOSITORIES_0_URL: song:8080
      MAESTRO_REPOSITORIES_0_NAME: "Overture"
      MAESTRO_REPOSITORIES_0_ORGANIZATION: Overture
      MAESTRO_REPOSITORIES_0_COUNTRY: CA
      # Maestro Configurations
      MAESTRO_FAILURELOG_ENABLED: true
      MAESTRO_FAILURELOG_DIR: app/logs/maestro
      MAESTRO_LOGGING_LEVEL_ROOT: INFO
      MAESTRO_NOTIFICATIONS_SLACK_ENABLED: false
      # Spring Settings
      SPRING_MVC_ASYNC_REQUESTTIMEOUT: -1
      SPRINGDOC_SWAGGERUI_PATH: /api
      # Kafka Integration
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:9092
      SPRING_CLOUD_STREAM_BINDINGS_SONGINPUT_DESTINATION: song-analysis
    networks:
      - db-network
      - index-network

  # ==========================
  # Elasticsearch
  # ==========================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch
    ports:
      - "9200:9200"
    environment:
      discovery.type: single-node
      cluster.name: workflow.elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx2048m
      ELASTIC_PASSWORD: myelasticpassword
      xpack.security.enabled: "true"
      MANAGE_INDEX_TEMPLATES: "true"
      NETWORK_HOST: http://localhost:9200
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
    healthcheck:
      test: "curl --silent --fail localhost:9200/_cluster/health?wait_for_status=yellow&timeout=50s || exit 1"
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 20s
    networks:
      - index-network
  
  # ==========================
  # Index Setup
  # ==========================
  index-setup:
    image: alpine:latest
    container_name: index-setup
    depends_on:
      elasticsearch:
        condition: service_healthy
    ports:
      - "9201:9201"
    volumes:
      - ./configurationFiles/elasticsearchConfigs/composer_index_template.json:/usr/share/elasticsearch/config/composer_index_template.json
      - ./configurationFiles/elasticsearchConfigs/composer_component_template.json:/usr/share/elasticsearch/config/composer_component_template.json
    command: >
      sh -c "
      apk --no-cache add curl && 
      sleep 30 && 
      curl -u elastic:myelasticpassword -X PUT 'http://elasticsearch:9200/_component_template/component_template' -H 'Content-Type: application/json' -d @/usr/share/elasticsearch/config/composer_component_template.json && 
      curl -u elastic:myelasticpassword -X PUT 'http://elasticsearch:9200/_index_template/index_template' -H 'Content-Type: application/json' -d @/usr/share/elasticsearch/config/composer_index_template.json && 
      curl -u elastic:myelasticpassword -X PUT 'http://elasticsearch:9200/analysis-composer-index' -H 'Content-Type: application/json' -d '{\"aliases\": {\"analysis_centric\": {\"is_write_index\": true}}}' && 
      echo 'Templates and index created successfully.'
      " 
    networks:
      - index-network

  # ==========================
  # Arranger-Server
  # ==========================
  arranger-server:
    image: ghcr.io/overture-stack/arranger-server:0b57cf15
    container_name: arranger-server
    platform: linux/amd64
    depends_on:
      index-setup:
        condition: service_completed_successfully
    ports:
      - "5050:5050"
    volumes:
     - ./configurationFiles/arrangerConfigs/base.json:/app/modules/server/configs/base.json
     - ./configurationFiles/arrangerConfigs/extended.json:/app/modules/server/configs/extended.json
     - ./configurationFiles/arrangerConfigs/facets.json:/app/modules/server/configs/facets.json
     - ./configurationFiles/arrangerConfigs/matchbox.json:/app/modules/server/configs/matchbox.json
     - ./configurationFiles/arrangerConfigs/table.json:/app/modules/server/configs/table.json
    environment:
      ENABLE_LOGS: false
      ES_HOST: http://elasticsearch:9200
      ES_USER: elastic
      ES_PASS: myelasticpassword
      REACT_APP_BASE_URL: http://localhost:3000
      REACT_APP_ARRANGER_ADMIN_ROOT: http://localhost:5050/graphql
    networks:
      - index-network

  # ==================================================================================
  #  F. Discovery (Stage)
  # ==================================================================================

  # ==========================
  # Stage
  # ==========================
  stage:
    image: ghcr.io/overture-stack/stage:3ede4e2
    container_name: stage
    platform: linux/amd64
    depends_on:
      arranger-server:
        condition: service_started
      keycloak:
        condition: service_started
    ports:
      - "3000:3000"
    environment:
      # Arranger Integration
      NEXT_PUBLIC_ARRANGER_DOCUMENT_TYPE: analysis
      NEXT_PUBLIC_ARRANGER_INDEX: analysis-composer-index
      NEXT_PUBLIC_ARRANGER_API_URL: http://arranger-server:5050
      NEXT_PUBLIC_ARRANGER_MANIFEST_COLUMNS: repositories.code, analysis.analysis_id, object_id, file.index_file.file_type, file.index_file.name, file.index_file.size, file.index_file.md5sum, file.index_file.object_id, donors.donor_id, donors.specimens.samples.sample_id, study_id
      # Score Integration
      NEXT_PUBLIC_SCORE_API_URL: score:8087
      # Keycloak Integration
      NODE_TLS_REJECT_UNAUTHORIZED: 0
      NEXT_PUBLIC_AUTH_PROVIDER: keycloak
      ACCESSTOKEN_ENCRYPTION_SECRET: super_secret
      SESSION_ENCRYPTION_SECRET: this_is_a_super_secret_secret
      NEXT_PUBLIC_KEYCLOAK_HOST: https://keycloak:8443
      NEXT_PUBLIC_KEYCLOAK_REALM: myrealm
      NEXT_PUBLIC_KEYCLOAK_CLIENT_ID: webclient
      KEYCLOAK_CLIENT_SECRET: ikksyrYaKX07acf4hpGrpKWcUGaFkEdM
      NEXT_PUBLIC_KEYCLOAK_PERMISSION_AUDIENCE: song
      # Stage Configs
      NEXTAUTH_URL: http://localhost:3000/api/auth
      NEXT_PUBLIC_LAB_NAME: Overture Composer Portal
      NEXT_PUBLIC_ADMIN_EMAIL: contact@overture.bio
      NEXT_PUBLIC_DEBUG: true
      NEXT_PUBLIC_SHOW_MOBILE_WARNING: true
    networks:
      - db-network
      - index-network

# ==========================
# Networks
# ==========================
networks:
  db-network:
  index-network: